#include <algorithm>
#include <array>
#include <cassert>
#include <chrono>
#include <cmath>
#include <cstring>
#include <functional>
#include <iomanip>
#include <iostream>
#include <map>
#include <numeric>
#include <queue>
#include <random>
#include <set>
#include <vector>
using namespace std;

// http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2016/p0200r0.html
template<class Fun> class y_combinator_result {
    Fun fun_;
public:
    template<class T> explicit y_combinator_result(T &&fun): fun_(std::forward<T>(fun)) {}
    template<class ...Args> decltype(auto) operator()(Args &&...args) { return fun_(std::ref(*this), std::forward<Args>(args)...); }
};
template<class Fun> decltype(auto) y_combinator(Fun &&fun) { return y_combinator_result<std::decay_t<Fun>>(std::forward<Fun>(fun)); }


template<typename A, typename B> ostream& operator<<(ostream &os, const pair<A, B> &p) { return os << '(' << p.first << ", " << p.second << ')'; }
template<typename T_container, typename T = typename enable_if<!is_same<T_container, string>::value, typename T_container::value_type>::type> ostream& operator<<(ostream &os, const T_container &v) { os << '{'; string sep; for (const T &x : v) os << sep << x, sep = ", "; return os << '}'; }

void dbg_out() { cerr << endl; }
template<typename Head, typename... Tail> void dbg_out(Head H, Tail... T) { cerr << ' ' << H; dbg_out(T...); }
#ifdef NEAL_DEBUG
#define dbg(...) cerr << "(" << #__VA_ARGS__ << "):", dbg_out(__VA_ARGS__)
#else
#define dbg(...)
#endif


const int MAXIMUM = 1005;
const int ITERS = 5005;

void run_case(int test_case) {
    int N, A, B;
    cin >> N >> A >> B;
    vector<int> U(N);

    for (auto &u : U)
        cin >> u;

    auto get_U = [&](int index) -> int {
        return index < N ? U[index] : 0;
    };

    auto good = [&](int initial) {
        vector<int> have(initial + 1, 0);
        have[initial] = 1;

        for (int i = initial; i >= 0; i--) {
            have[i] = min(have[i], MAXIMUM);

            if (have[i] < get_U(i))
                return false;

            int extra = have[i] - get_U(i);
            if (i >= A) have[i - A] += extra;
            if (i >= B) have[i - B] += extra;
        }

        return true;
    };

    int ans = N - 1, tries = 0;

    while (!good(ans) && tries++ < ITERS)
        ans++;

    ans++;
    cout << "Case #" << test_case << ": " << (tries >= ITERS ? "IMPOSSIBLE" : to_string(ans)) << '\n';
}

int main() {
    int tests;
    cin >> tests;

    for (int tc = 1; tc <= tests; tc++) {
        run_case(tc);
        cout << flush;
    }
}
