#include<bits/stdc++.h>
using namespace std;
//#pragma GCC optimize "trapv"
#define ll                 long long int
#define mod                1000000007
#define pi                 3.14159265358979323846264338327950288419716939937510
#define setbit(x)          __builtin_popcountll(x)
#define db                 long double
#define pp(x)              pair<x,x>
#define ff                 first
#define ss                 second
#define FIO                ios_base::sync_with_stdio(false); cin.tie(NULL);
#define tc                 ll tc; cin>>tc; for(ll number = 1 ; number <= tc ; number ++ )
#define vv(x)              vector<x>
#define pb                 push_back
#define pob                pop_back
#define pf                 push_front
#define pof                pop_front
#define endl               "\n"
#define pq                 priority_queue
#define SZ(x)              (ll)(x.size())
#define forn(i,s,n)        for(ll i=s ; i<n ; i++)
#define fornr(i,e,s)       for(ll i=e-1 ; i>=s ; i--)
#define file               freopen("input.txt","r",stdin); freopen("output.txt","w",stdout)
#define all(x)             x.begin(), x.end()
#define uniq(v)           (v).erase(unique(all(v)),(v).end())
#define trav(t, v)         for(auto t: v)

/*---------------------***PBDS***-------------------------------------------------------*/
/*#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
using namespace __gnu_pbds;
template<typename T>
#define o_set(T) tree<T, null_type,less<T>, rb_tree_tag,tree_order_statistics_node_update>
//member functions :
//1. order_of_key(k) : number of elements strictly lesser than k
//2. find_by_order(k) : k-th element in the set*/
/*---------------------***PBDS Ends***-------------------------------------------------------*/



/*---------------------***Debugging Starts***-------------------------------------------*/

#define dbg(x)             { cout<< #x << ": " << (x) << endl; }
#define dbg2(x,y)          { cout<< #x << ": " << (x) << " , " << #y << ": " << (y) << endl; }
#define dbgArr(a,n)        cout<<"Array "<<#a<<endl; for(ll i=0 ; i<n ; i++) cout<<a[i]<<" "; cout<<endl;

#define error(args...) { string _s = #args; replace(_s.begin(), _s.end(), ',', ' '); stringstream _ss(_s); istream_iterator<string> _it(_ss); err(_it, args);cout << endl; }

void err(istream_iterator<string> it) {}
template<typename T, typename... Args>
void err(istream_iterator<string> it, T a, Args... args) {
	cerr << *it << " = " << a << ",  ";
	err(++it, args...);
}
/*---------------------***Debugging Ends***-----------------------------------------------*/


ll power(ll x, ll b, ll modh = mod) {ll p = 1;while (b > 0) {if(b&1) {p = p * x; p %= modh;} b >>= 1; x *= x; x %= modh;} return p % modh;}
std::vv(ll) fact;
void fact_pre(ll n = 400005) {fact.resize(n, 1); for(ll i=2; i<n; i++) fact[i] = (fact[i-1]*i) %mod;}
ll ncr(ll n, ll r) {if(r > n) return 0; return (fact[n] * power((fact[n-r] * fact[r]) %mod, mod-2))%mod;}
mt19937_64 rang(chrono::high_resolution_clock::now().time_since_epoch().count());
ll rng(ll lim, ll s=0) { uniform_int_distribution<ll> uid(s, lim - 1); return uid(rang); }

# define INF 1e15
#define N 1000001

struct ppp{
    ll ff, ss, tt;
};


bool comp(pair<pp(ll), ll> &p1, pair<pp(ll), ll> &p2){
    if(p1.ff.ff == p2.ff.ff){
        return p1.ff.ss > p2.ff.ss;
    }else{
        return p1.ff.ff < p2.ff.ff;
    }
}

ll bsleft(vv(ll) &arr, ll c){
    ll l = -1, r = arr.size();
    while(r-l > 1){
        ll mid = (r+l)/2;
        if(arr[mid] <= c){
            l = mid;
        }else{
            r = mid;
        }
    }
    return l;
}

struct lex_compare {
    bool operator() ( const pair<pp(ll), ll> &p1, const pair<pp(ll), ll> &p2){
        if(p1.ff.ff == p2.ff.ff){
            if(p1.ff.ss != p2.ff.ss)return p1.ff.ss > p2.ff.ss;
            return p1 < p2;
        }else{
            return p1.ff.ff < p2.ff.ff;
        }
    }
};


bool rec(ll curr, vv(ll) &arr, ll n, ll a, ll b){
    vv(ll) dp(max(n+1, curr+1), 0);
    dp[curr] = 1;
    forn(i, 1, n+1) dp[i] -= arr[i];
    bool f = 1;
    for(ll i = curr; i>=1;i--){
        if(dp[i] < 0){
            return 0;
        }
        //error(i, dp[i], arr[i]);
        ll diff = dp[i];
        dp[i] -= diff;
        if(i-a>0) {
            dp[i-a] += diff;
            dp[i-a] = min(dp[i-a], 3000LL);
        }
        if(i-b>0) {
            dp[i-b] += diff;
            dp[i-b] = min(dp[i-b], 3000LL);
        }
    }
    return 1;
}

void solve(ll tt){
    ll n, a, b; cin >> n >> a >> b;
    if(a>b) swap(a, b);
    vv(ll) arr(n+5);
    ll z = 0;
    forn(i, 1, n+1){
        cin >> arr[i];
        if(arr[i]) z = i;
    }
    forn(i, z, 10001){
        if(rec(i, arr, n, a, b)){
            cout << "Case #" << tt << ": " << i << endl;
            return;
        }
    }
    cout << "Case #" << tt << ": " << "IMPOSSIBLE" << endl;
    return ;
}

int main(){
    FIO;
    ll t; t =1;;
    cin >> t;
    forn(i, 1, t+1){
        solve(i);
    }
    return 0;
}
